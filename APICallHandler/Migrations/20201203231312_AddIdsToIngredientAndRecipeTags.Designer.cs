// <auto-generated />
using System;
using APICallHandler;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APICallHandler.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201203231312_AddIdsToIngredientAndRecipeTags")]
    partial class AddIdsToIngredientAndRecipeTags
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Models.Cook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cooks");
                });

            modelBuilder.Entity("Models.Ingredient", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Models.IngredientTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CookId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("IngredientId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("TagId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("TagId");

                    b.ToTable("IngredientTags");
                });

            modelBuilder.Entity("Models.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CookId")
                        .HasColumnType("bigint");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainGraphicLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Models.RecipeIngredient", b =>
                {
                    b.Property<long?>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Measurement")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Preparation")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RecipeId", "IngredientId", "Measurement", "Preparation");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("Models.RecipeTag", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("RecipeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("TagId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("TagId");

                    b.ToTable("RecipeTags");
                });

            modelBuilder.Entity("Models.Tag", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Models.IngredientTag", b =>
                {
                    b.HasOne("Models.Cook", "Cook")
                        .WithMany("IngredientTags")
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Ingredient", "Ingredient")
                        .WithMany("IngredientTags")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Tag", "Tag")
                        .WithMany("IngredientTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cook");

                    b.Navigation("Ingredient");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Models.Recipe", b =>
                {
                    b.HasOne("Models.Cook", "Cook")
                        .WithMany("Recipes")
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cook");
                });

            modelBuilder.Entity("Models.RecipeIngredient", b =>
                {
                    b.HasOne("Models.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Models.Fractionable", "Quantity", b1 =>
                        {
                            b1.Property<long>("RecipeIngredientRecipeId")
                                .HasColumnType("bigint");

                            b1.Property<long>("RecipeIngredientIngredientId")
                                .HasColumnType("bigint");

                            b1.Property<string>("RecipeIngredientMeasurement")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("RecipeIngredientPreparation")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Denominator")
                                .HasColumnType("int");

                            b1.Property<int>("Numerator")
                                .HasColumnType("int");

                            b1.Property<int>("Whole")
                                .HasColumnType("int");

                            b1.HasKey("RecipeIngredientRecipeId", "RecipeIngredientIngredientId", "RecipeIngredientMeasurement", "RecipeIngredientPreparation");

                            b1.ToTable("RecipeIngredients");

                            b1.WithOwner()
                                .HasForeignKey("RecipeIngredientRecipeId", "RecipeIngredientIngredientId", "RecipeIngredientMeasurement", "RecipeIngredientPreparation");
                        });

                    b.Navigation("Ingredient");

                    b.Navigation("Quantity");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Models.RecipeTag", b =>
                {
                    b.HasOne("Models.Recipe", "Recipe")
                        .WithMany("RecipeTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Tag", "Tag")
                        .WithMany("RecipeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Models.Cook", b =>
                {
                    b.Navigation("IngredientTags");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Models.Ingredient", b =>
                {
                    b.Navigation("IngredientTags");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("Models.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");

                    b.Navigation("RecipeTags");
                });

            modelBuilder.Entity("Models.Tag", b =>
                {
                    b.Navigation("IngredientTags");

                    b.Navigation("RecipeTags");
                });
#pragma warning restore 612, 618
        }
    }
}
